<<<<<<< HEAD
Recursion
A recursive function is simply defined as a routine that calls itself directly or indirectly.
A recursive function is a process which calls itself directly or indirectly .
In other words, it is a function that solves the problem by dividing it into parts and then solving its parts to get it done.This technique is commonly used in programming to solve problems that can be broken down into simpler and simpler , similar subproblems .
Properties :
The primary property of recursion is the ability to solve a problem by breaking into smaller sub-problems each can be solved in the same way.
It must have a stopping criteria to avoid any kind of infinite recursion.
They may be less efficient than iterative solutions in terms of memory and performance .
Advantages :
Recursion can  simplify complex problems by breaking them .
It can be more readable and  understandable than iterative code.
It is essential for some algorithms and data structures.
Disadvantages :
It can be less effective than iterative solutions in terms of memory and performance.
It can be more challenging to debug and understand than iterative solutions.
It can lead to stack overflow errors if recursion depth is too high.
Types :
Direct recurssion
Indirect recursion
Direct recursion :
When a function is called within itself directly is called direct recursion.
For example :
#include <iostream>
using namespace std;

int factorial(int n) {
    if (n <= 1)  // base case
        return 1;
    else
        return n * factorial(n - 1);  // recursive case
}

int main() {
    int num = 5;
    cout << "Factorial of " << num << " is " << factorial(num) << endl;
    return 0;
}
Breaking point : 
The breaking point in this code is that if(n>=1) if n gets smaller than one then return 1.because factorial of 0 and 1 is 1 because it returns only one .
Code : 
The purpose of this code is to find a factorial of a given number .When the number is greater than 0 and 1 then the function calls itself and calculates the factorial of the number always until the statement is true.
Indirect recursion : 
It occurs when the function calls another function that eventually calls the original function and it forms a cycle.
For example : 
#include <iostream>
using namespace std;


void functionA(int n);
void functionB(int n);

void functionA(int n) {
    if (n > 0) {
        cout << "A: " << n << endl;
        functionB(n - 1);  // calls functionB
    }
}

void functionB(int n) {
    if (n > 0) {
        cout << "B: " << n << endl;
        functionA(n - 1);  // calls functionA
    }
}

int main() {
    int num = 5;
    functionA(num);
    return 0;
}
Calls : 
functionA calls functionB, and then functionB calls functionA in an indirect recursive manner.
Breaking point : 
The process continues, decreasing n each time, until n reaches 0, at which point neither function calls the other, and the recursion stops.
Types of Direct function : 
Tail recursion 
Head recursion 
Tree recursion 
Nested recursion 



=======
Recursion
A recursive function is simply defined as a routine that calls itself directly or indirectly.
A recursive function is a process which calls itself directly or indirectly .
In other words, it is a function that solves the problem by dividing it into parts and then solving its parts to get it done.This technique is commonly used in programming to solve problems that can be broken down into simpler and simpler , similar subproblems .
Properties :
The primary property of recursion is the ability to solve a problem by breaking into smaller sub-problems each can be solved in the same way.
It must have a stopping criteria to avoid any kind of infinite recursion.
They may be less efficient than iterative solutions in terms of memory and performance .
Advantages :
Recursion can  simplify complex problems by breaking them .
It can be more readable and  understandable than iterative code.
It is essential for some algorithms and data structures.
Disadvantages :
It can be less effective than iterative solutions in terms of memory and performance.
It can be more challenging to debug and understand than iterative solutions.
It can lead to stack overflow errors if recursion depth is too high.
Types :
Direct recurssion
Indirect recursion
Direct recursion :
When a function is called within itself directly is called direct recursion.
For example :
#include <iostream>
using namespace std;

int factorial(int n) {
    if (n <= 1)  // base case
        return 1;
    else
        return n * factorial(n - 1);  // recursive case
}

int main() {
    int num = 5;
    cout << "Factorial of " << num << " is " << factorial(num) << endl;
    return 0;
}
Breaking point : 
The breaking point in this code is that if(n>=1) if n gets smaller than one then return 1.because factorial of 0 and 1 is 1 because it returns only one .
Code : 
The purpose of this code is to find a factorial of a given number .When the number is greater than 0 and 1 then the function calls itself and calculates the factorial of the number always until the statement is true.
Indirect recursion : 
It occurs when the function calls another function that eventually calls the original function and it forms a cycle.
For example : 
#include <iostream>
using namespace std;

void functionA(int n);
void functionB(int n);

void functionA(int n) {
    if (n > 0) {
        cout << "A: " << n << endl;
        functionB(n - 1);  // calls functionB
    }
}

void functionB(int n) {
    if (n > 0) {
        cout << "B: " << n << endl;
        functionA(n - 1);  // calls functionA
    }
}

int main() {
    int num = 5;
    functionA(num);
    return 0;
}
Calls : 
functionA calls functionB, and then functionB calls functionA in an indirect recursive manner.
Breaking point : 
The process continues, decreasing n each time, until n reaches 0, at which point neither function calls the other, and the recursion stops.
Types of Direct function : 
Tail recursion 
Head recursion 
Tree recursion 
Nested recursion 



>>>>>>> d9446cbd67
Fibonacci sequence : 
A fibonacci sequence is a sequence followed by every other element in nature like flower petals , sunflower seeds and in many fields its use is very essential .
Obtained :
It is a sequence of numbers that starts with 0 and 1 and the so on is obtained by adding the two previous one’s for instance : 
0 ,1, 1, 2, 3, 5,8,12 ….. Have you noticed that a sequence following this sequence is essential for us as it is the use of today .  
Relation with discrete mathematics : 
It is connected with discrete math through concepts like recurrence relations , combinatorics and even graph theory.
Recurrence relation : 
The fibonacci sequence is a classical relation  example of the recurrence relation because it uses the previous terms to describe the upcoming terms and recurrence relation is such that it uses the previous terms to generate a new one .
Look at this expression : 
f(n)=f(n-1)+f(n-2) 
This eq is a recursive relation because it describes a way to show f(n) in terms of the previous numbers .
Code example : 
#include <iostream>
using namespace std;


// Recursive function to calculate Fibonacci sequence
int fibonacci(int n) {
    if (n <= 1) {
        return n; // Base cases: F(0) = 0, F(1) = 1
    }
    return fibonacci(n - 1) + fibonacci(n - 2); // Recursive relation
}




int main( ) {
    int n;
    cout << "Enter a number to find its Fibonacci value: ";
    cin >> n;


    // Calculate Fibonacci and display the result
    cout << "Fibonacci(" << n << ") = " << fibonacci(n) << endl;


    return 0;
}
THE OUTPUT : 
This code gives the number at which the number you entered is in that place in the fibonacci sequence .
This code is the foundation of the eq defined at the upper part .
new work:




abc

