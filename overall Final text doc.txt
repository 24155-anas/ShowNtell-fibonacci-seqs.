

1. Introduction to the Fibonacci Sequence

Definition and Formula
The Fibonacci Sequence is a series of numbers where each number is the sum of the two preceding ones. Mathematically: 
F(n) = F(n-1) + F(n-2) with initial values F(0) =0 and F(1) =1
The sequence begins: 0, 1, 1, 2, 3, 5, 8, 13, etc.



Golden Ratio;
And here is a surprise. When we take any two successive (one after the other) Fibonacci Numbers, their ratio is very close to the Golden Ratio "f" which is approximately 1.618034...
Let me relate this with mathematics;
let A and B,the two numbers. I do not know that it is true or not but as I choose the more bigger numbers , the more closer I go to the golden ratio
in other words;
 the bigger the pair of Fibonacci Numbers, the closer the approximation.
Relation with golden ratio:
To summarize, the Fibonacci sequence begins with 0 and 1, and each successive number is the sum of the two previous numbers. As the Fibonacci sequence grows, if you divide pairs of numbers in the sequence (the larger by the smaller), you will get an approximate value of the golden ratio, which is roughly 1.618.


Recursion is simply a process where a function calls itself to solve sub-problems.


Recursively Defined Functions:

Basis Step: Specifies the value of the function for the first term(s).
Recursive Step: Gives a rule for finding subsequent values using previous value(s), beginning at those defined in the basis step.


Properties of Recursion:

Performing the same operations multiple times with different inputs.
In every step, we try smaller inputs to make the problem smaller.
Base condition is needed to stop the recursion otherwise infinite loop will occur.
Algorithm: Steps
Step1   Define a base case: Identify the simplest case for which the solution is known or trivial. This is the stopping condition for the recursion, as it prevents the function from infinitely calling itself.

Step2   Define a recursive case: Define the problem in terms of smaller subproblems. Break the problem down into smaller versions of itself, and call the function recursively to solve each subproblem.

Step3   Ensure the recursion terminates: Make sure that the recursive function eventually reaches the base case, and does not enter an infinite loop.

step4   Combine the solutions: Combine the solutions of the subproblems to solve the original problem.

Let us consider a problem that a programmer has to determine the sum of first n natural numbers, there are several ways of doing that but the simplest approach is simply to add the numbers starting from 1 to n. So the function simply looks like this



In Fibonacci sequences:

Base case:

F(0)=0, F(1)=1

recursive case:
F(n)=F(n-1)+F(n-2)

Proving By Induction:

F(n) = F(n-1) + F(n-2), for n >= 2,
where F(0) = 0 and F(1) = 1.

---

Step 1: Base Cases

For n = 2:

F(2) = F(1) + F(0) = 1 + 0 = 1.

This matches the definition of the Fibonacci sequence, so the base case holds.



---

Step 2: Inductive Hypothesis

Assume that the recursive relation holds for n = k :

F(k) = F(k-1) + F(k-2)

---

Step 3: Inductive Step

We need to prove that the recursive relation holds for n = k+1, i.e.,

F(k+1) = F(k) + F(k-1).

Using the Fibonacci recurrence definition:

F(k+1) = F(k) + F(k-1).

By the inductive hypothesis, we know:

F(k) = F(k-1) + F(k-2),
and
F(k-1) = F(k-2) + F(k-3).

Substitute F(k) = F(k-1) + F(k-2) into the equation for F(k+1):

F(k+1) = (F(k-1) + F(k-2)) + F(k-1).

Simplify:

F(k+1) = F(k-1) + F(k-2) + F(k-1),
F(k+1) = 2F(k-1) + F(k-2).

Now substitute F(k-1) = F(k-2) + F(k-3):

F(k+1) = 2(F(k-2) + F(k-3)) + F(k-2),
F(k+1) = 2F(k-2) + 2F(k-3) + F(k-2),
F(k+1) = 3F(k-2) + 2F(k-3).

This simplifies to exactly match the recursive Fibonacci pattern:

F(k+1) = F(k) + F(k-1).

Thus, the inductive step holds.

---

Step 4: Conclusion

By the principle of induction, the Fibonacci numbers follow the recursive relation:

F(n) = F(n-1) + F(n-2), for all n >= 2.





Fibonacci Binary Trees: Time Complexity and Levels

1. Time Complexity at Each Level:
- At each level of a Fibonacci binary tree, the number of nodes doubles:
  - Level 0: 1 node (root, F(n)).
  - Level 1: 2 nodes (F(n-1), F(n-2)).
  - Level 2: 4 nodes (F(n-2), F(n-3), F(n-3), F(n-4)).
  - Level k: 2^k nodes.

- Work per node is constant, so the total work at level k is proportional to the number of nodes:
  - Work at level k: O(2^k).

2. Total Time Complexity:
- Total work is the sum of work at all levels.
- The Fibonacci tree of order n has exactly F(n+2)âˆ’1 nodes.

- Since the height of the tree is n (the Fibonacci index), the total time complexity is:
  Total Time Complexity: O(2^n).

3. Number of Levels:
- The number of levels corresponds to the height of the tree, which is determined by n:
  - Root is at level 0.
  - Tree height: n.
  - Total levels: n + 1 



